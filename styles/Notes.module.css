
.container {
  padding: 1.5rem;
  max-width: 42rem;
  margin: auto;
  font-family: var(--font-body);
}

.pageTitle {
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: 1rem;
  color: var(--muted);
  font-family: var(--font-heading);
}

/* Textarea */
.textarea {
  width: 100%;
  border: 2px solid #ddd;
  border-radius: 12px;
  padding: 1rem;
  font-size: 1rem;
  margin-bottom: 1rem;
  resize: vertical;
  background: #f9f9f9;
  transition: border 0.2s, box-shadow 0.2s;
}

.textarea:focus {
  border-color: #6a5af9;
  box-shadow: 0 4px 12px rgba(106,90,249,0.3);
  outline: none;
}

/* FIX 2: File + Generate row structure */
.fileGenerateRow {
  display: flex;
  gap: 1rem;
  margin-bottom: 1.5rem; /* Increased margin for better spacing */
}

/* FIX 2: Hidden file input */
.hiddenFileInput {
  width: 0.1px;
  height: 0.1px;
  opacity: 0;
  overflow: hidden;
  position: absolute;
  z-index: -1;
}

/* File button (now styled as a label) */
.fileButton {
  /* Use flex-grow for better scaling */
  flex: 1; 
  display: flex; /* For centering the text */
  justify-content: center;
  align-items: center;
  background: #fff;
  border: 2px solid #6a5af9;
  color: #6a5af9;
  border-radius: 8px;
  padding: 0.7rem 1.2rem;
  cursor: pointer;
  font-weight: 600;
  transition: all 0.2s;
  text-align: center; /* Ensures text is centered */
}

.fileButton:hover {
  background: #6a5af9;
  color: #fff;
}

/* Generate button */
.generateButton {
  flex: 1;
  background: #6a5af9;
  color: #fff;
  border: none;
  padding: 0.7rem 1.2rem;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 700;
  transition: transform 0.2s, box-shadow 0.2s;
  /* Ensure it has a minimum width if needed, but flex handles it here */
}

.generateButton:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 20px rgba(106,90,249,0.3);
}

.loading {
  opacity: 0.7;
  cursor: progress;
}

/* Error */
.error {
  color: crimson;
  margin-bottom: 1.5rem; /* Increased margin for better spacing */
  padding: 0.75rem;
  background: #ffebeb;
  border: 1px solid crimson;
  border-radius: 8px;
}

/* Result Card */
.resultCard {
  margin-top: 1.5rem;
  padding: 1.5rem;
  border-radius: 12px;
  background: #f5f5f5;
  color: #111;
  box-shadow: 0 8px 24px rgba(0,0,0,0.15);
}

.resultCard p {
  margin-bottom: 0.75rem;
  line-height: 1.6;
}

.resultTitle {
  font-weight: 700;
  margin-bottom: 1rem; /* Adjusted margin */
  color: #6a5af9;
  font-size: 1.5rem;
}

/* Flashcards */
/* ------------------------------------------------------------- */
/* --------------- FLASHCARD STACKING AND ANIMATION -------------- */
/* ------------------------------------------------------------- */

/* NEW: Wrapper for the entire stack */
.flashcardsStackWrapper {
  /* Essential to contain the absolutely positioned cards */
  position: relative; 
  /* Define the height and width based on the desired card size */
  width: 100%; 
  max-width: 300px; /* Max card width */
  height: 180px;  /* Max card height */
  margin: 0 auto; /* Center the stack wrapper */
}

/* NEW: Controls layout (arrows) */
.flashcardControls {
  display: flex;
  justify-content: center;
  gap: 1.5rem;
  margin-top: 1.5rem;
}

.controlButton {
  padding: 0.5rem 1rem;
  border: 1px solid #6a5af9;
  background: white;
  color: #6a5af9;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 600;
  transition: background 0.2s, transform 0.1s;
}

.controlButton:hover {
  background: #f0f0f5;
  transform: translateY(-1px);
}
.controlButton:disabled {
  border-color: #ccc;
  color: #ccc;
  cursor: not-allowed;
  background: #fff;
}


/* --- Individual Card Styling (The Stack and Flip) --- */

.flashcard {
  perspective: 1000px;
  cursor: pointer;
  
  /* Stack the cards on top of each other */
  position: absolute; 
  top: 0;
  left: 0;
  
  /* Fixed dimensions for stacking */
  width: 100%;
  height: 100%;
  
  /* Initial state: no transform */
  transform: translate(0, 0); 
  
  /* Smooth transition for movement (move away) and opacity */
  /* Note: z-index is handled by inline style in JSX */
  transition: transform 0.4s ease-out, opacity 0.4s ease-out; 
  
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

/* JAVASCRIPT VISUAL STACKING CLASSES (Apply slight offsets) */

/* Card immediately behind the active one */
.nextCard {
  transform: translate(5px, 5px); /* Small offset down/right */
  box-shadow: 0 4px 8px rgba(0,0,0,0.05);
}

/* Card two places behind */
.nextNextCard {
  transform: translate(10px, 10px); /* Larger offset down/right */
  box-shadow: 0 2px 4px rgba(0,0,0,0.02);
}

/* Card that has been viewed/swiped away (The 'move away' transition) */
.removed {
  /* Move far off screen to the left and fade out */
  transform: translateX(-400px) rotate(-10deg); 
  opacity: 0;
  /* Ensure z-index is low after animation completes */
  z-index: 1 !important; 
}


/* --- Inner Card Faces (Flipping Logic) --- */

.flashcard > div {
  width: 100%;
  height: 100%; /* Ensures faces fill the 180px parent */
  border-radius: 12px;
  padding: 1rem;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  
  position: absolute; 
  top: 0;
  left: 0;
  
  backface-visibility: hidden; /* Key for the 3D flip effect */
  transition: transform 0.6s;
  font-weight: 600;
  font-size: 0.95rem;
}

/* Front Face */
.front {
  background: linear-gradient(120deg, #6a5af9, #b8871f);
  color: #fff;
  transform: rotateY(0deg);
}

/* Back Face (Starts rotated away) */
.back {
  background: #fff;
  color: #111;
  transform: rotateY(180deg);
}

/* Flip State */
.flipped .front {
  transform: rotateY(180deg);
}

.flipped .back {
  transform: rotateY(0deg);
}